#INFO: **** input file is /home/iliya/Desktop/projects/funstuff/pyscf/pGHF/SzProjectedFockMatrix/fock.py ****
from pyscf import gto, scf, tools
import numpy as np
import scipy.linalg as lalg
import scipy.optimize as opt
import time
import sys

def contractEri(v2, tdm):
    nso = tdm.shape[0]
    nao = nso // 2

    tdmaa = tdm[:nao, :nao]
    tdmbb = tdm[nao:, nao:]
    tdmab = tdm[:nao, nao:]
    tdmba = tdm[nao:, :nao]

    #the spin indices on the J, K matrices are from the contracted indices
    Jaa = np.einsum('pqrs,sr->pq', v2, tdmaa, dtype = complex, optimize = True)

    Jbb = np.einsum('pqrs,sr->pq', v2, tdmbb, dtype = complex, optimize = True)

    Kaa = np.einsum('psrq,sr->pq', v2, tdmaa, dtype = complex, optimize = True)
    Kbb = np.einsum('psrq,sr->pq', v2, tdmbb, dtype = complex, optimize = True)

    Kab = np.einsum('psrq,sr->pq', v2, tdmba, dtype = complex, optimize = True)
    Kba = np.einsum('psrq,sr->pq', v2, tdmab, dtype = complex, optimize = True)

    G1 = np.zeros((nso, nso), dtype = complex)
    G1[:nao, :nao] = Jaa + Jbb - Kaa
    G1[nao:, nao:] = Jaa + Jbb - Kbb
    G1[:nao, nao:] = - Kba
    G1[nao:, :nao] = - Kab

    return G1

def calcSzSymmetryProjector(nso, sz, nGrid = 8):
    nao = nso // 2
    Wg = []
    Rg = []
    for p in range(nGrid):
        theta = 2 * np.pi * p / nGrid

        w = np.exp(- 1j * theta * sz) / nGrid
        Wg.append(w)

        r = lalg.block_diag(np.exp(1j * theta * 0.5) * np.identity(nao), np.exp(1j * theta * (- 0.5)) * np.identity(nao))
        Rg.append(r)
    return Wg, Rg

def calcEnergy(S, H1, v2, Phi, Wg, Rg):
    #denominator and numerator of energy
    D = 0.0
    N = 0.0

    for i in range(len(Wg)):
        Phig = Rg[i].dot(Phi)

        #overlap quantities
        O = Phi.conj().T.dot(S).dot(Phig)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        tdm = Phig.dot(invO).dot(Phi.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    E = N / D
    return np.real(E)

def calcEnergyFromDensity(S, H1, v2, Phi, dm, Wg, Rg):
    #denominator and numerator of energy
    D = 0.0
    N = 0.0

    for i in range(len(Wg)):
        #overlap quantities
        O = np.einsum('xa,ab,bc,cd,d,de,ef,fy->xy', Phi.conj().T, S, dm, S, np.diag(Rg[i]), dm, S, Phi, dtype = complex, optimize = True)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        tdm = np.einsum('x,xa,ab,bc,cd,de,ef,fy->xy', np.diag(Rg[i]), dm, S, Phi, invO, Phi.conj().T, S, dm, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    E = N / D
    return np.real(E)

def calcEnergyAndFockMatrix(S, H1, v2, Phi, Wg, Rg):
    #deformed density matrix
    dm = Phi.dot(Phi.conj().T)

    #denominator and numerator of energy
    D = 0.0
    N = 0.0
    #gradient with respect to a,b element of deformed denisty matrix of the denominator and numerator of energy
    Dab = np.zeros(S.shape, dtype = complex)
    Nab = np.zeros(S.shape, dtype = complex)

    for i in range(len(Wg)):
        #overlap quantities
        O = np.einsum('ma,ab,b,bn->mn', Phi.conj().T, S, np.diag(Rg[i]), Phi, dtype = complex, optimize = True)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #derivative of detO with respect to a,b dm parameter
        detOab  = detO * np.einsum('ab,bc,cm,nd,d,de,ef,fa->mn', invO, Phi.conj().T, S, S, np.diag(Rg[i]), dm, S, Phi, dtype = complex, optimize = True)
        detOab += detO * np.einsum('ab,bc,cd,de,em,m,nf,fa->mn', invO, Phi.conj().T, S, dm, S, np.diag(Rg[i]), S, Phi, dtype = complex, optimize = True)

        #transition density matrix
        tdm = np.einsum('m,ma,ab,bn->mn', np.diag(Rg[i]), Phi, invO, Phi.conj().T, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #drivative of H with respect to a,b dm parameter
        M1 = H1 + G1

        X = np.einsum('ab,bc,cd,de,ef->af', S, Phi, invO, Phi.conj().T, S, dtype = complex, optimize = True)

        A1 = np.einsum('na,ab,bm,m->mn', X, dm, M1, np.diag(Rg[i]), dtype = complex, optimize = True)
        A2 = np.einsum('na,a,ab,bm->mn', M1, np.diag(Rg[i]), dm, X, dtype = complex, optimize = True)

        B1 = - np.einsum('ab,b,bc,cm,nd,d,de,ef,fa->mn', M1, np.diag(Rg[i]), dm, X, S, np.diag(Rg[i]), dm, X, dm, dtype = complex, optimize = True)
        B2 = - np.einsum('ab,b,bc,cd,de,em,m,nf,fa->mn', M1, np.diag(Rg[i]), dm, X, dm, S, np.diag(Rg[i]), X, dm, dtype = complex, optimize = True)

        Hab = A1 + A2 + B1 + B2

        #averages with symmetry weights
        D += Wg[i] * detO
        Dab += Wg[i] * detOab

        N += Wg[i] * detO * H
        Nab += Wg[i] * (detOab * H + detO * Hab)

    E = N / D
    F = (Nab / D) - E * (Dab / D)

    #separate occupied-virtual spaces
    P = dm.dot(S) #occ projector
    I = np.identity(P.shape[0], dtype = complex)
    Q = I - P #virt projector
    Fstandard = H1 + contractEri(v2, dm)
    F = F + P.conj().T.dot(Fstandard).dot(P) + Q.conj().T.dot(Fstandard).dot(Q)
    return E, F

def calcEnergyAndFockMatrixFiniteDifference(S, H1, v2, Phi, Wg, Rg):
    ds = 1.e-6

    dm = Phi.dot(Phi.conj().T)
    E0 = calcEnergyFromDensity(S, H1, v2, Phi, dm, Wg, Rg)

    Fr = np.zeros(dm.shape, dtype = complex)
    for a in range(dm.shape[0]):
        for b in range(dm.shape[1]):
            dm1 = dm.copy()
            dm1[a, b] += ds
            E = calcEnergyFromDensity(S, H1, v2, Phi, dm1, Wg, Rg)

            Fr[a, b] = (E - E0) / ds

    Fi = np.zeros(dm.shape, dtype = complex)
    for a in range(dm.shape[0]):
        for b in range(dm.shape[1]):
            dm1 = dm.copy()
            dm1[a, b] += 1j * ds
            E = calcEnergyFromDensity(S, H1, v2, Phi, dm1, Wg, Rg)

            Fi[a, b] = (E - E0) / ds

    return E0, Fr + 1j * Fi

def geig(A, B):
    w, v = lalg.eigh(B)
    idx = []
    for i in range(w.size):
        if abs(w[i]) > 1.e-8:
            idx.append(i)
    X = np.zeros((B.shape[0], len(idx)), dtype = complex)
    for i in range(len(idx)):
        X[:, i] = v[:, idx[i]] / np.sqrt(w[idx[i]])

    Ap = X.conj().T.dot(A).dot(X)
    Bp = X.conj().T.dot(B).dot(X)
    w, v = lalg.eig(Ap)
    v = X.dot(v)
    return w, v

def geigh(A, B):
    w, v = lalg.eigh(B)
    idx = []
    for i in range(w.size):
        if abs(w[i]) > 1.e-8:
            idx.append(i)
    X = np.zeros((B.shape[0], len(idx)), dtype = complex)
    for i in range(len(idx)):
        X[:, i] = v[:, idx[i]] / np.sqrt(w[idx[i]])

    Ap = X.conj().T.dot(A).dot(X)
    Bp = X.conj().T.dot(B).dot(X)
    w, v = lalg.eigh(Ap)
    v = X.dot(v)
    return w, v

def randOrthoMat(dim, S = None):
    randMat = np.random.randn(dim, dim) + 1j * np.random.randn(dim, dim)
    randMat = randMat + randMat.conj().T
    w, v = lalg.eigh(randMat, S)
    return v

def modifiedGramSchmidt(V, S = None):
    if S is None:
        S = np.identity(V.shape[0], dtype = V.dtype)
    U = np.zeros(V.shape, dtype = V.dtype)
    U[:, 0] = V[:, 0] / np.sqrt( V[:, 0].conj().T.dot(S).dot(V[:, 0]) )
    for i in range(1, V.shape[1]):
        U[:, i] = V[:, i]
        for j in range(i):
            U[:, i] = U[:, i] - ( U[:, j].conj().T.dot(S).dot(U[:, i]) ) / ( U[:, j].conj().T.dot(S).dot(U[:, j]) ) * U[:, j]
        U[:, i] = U[:, i] / np.sqrt( U[:, i].conj().T.dot(S).dot(U[:, i]) )
    return U

class DIIS(object):
    counter = 0 #diis does nothing for the first nVec iterations
    nVec = 6

    sizeVector = None
    errorVectors = None

    shapeObject = None
    averagedObjects = None

    def __init__(self, sizeVector, shapeObject, nVec = 6):
        self.sizeVector = sizeVector
        self.errorVectors = []

        self.shapeObject = shapeObject
        self.averagedObjects = []

        self.nVec = nVec
        for i in range(nVec):
            errorVec = np.zeros((sizeVector, 1), dtype = complex)
            self.errorVectors.append(errorVec)

            averagedObject = np.zeros(shapeObject, dtype = complex)
            self.averagedObjects.append(averagedObject)

    def restart(self):
        self.counter = 0

    def update(self, errVec, avgObj):
        self.counter += 1
        self.errorVectors.pop(0)
        self.errorVectors.append(errVec)
        self.averagedObjects.pop(0)
        self.averagedObjects.append(avgObj)

        returnObj = np.zeros(self.shapeObject, dtype = complex)
        if self.counter < self.nVec:
            returnObj = avgObj
        else:
            b = np.zeros((self.nVec + 1, 1), dtype = complex)
            b[self.nVec] = - 1.0

            Bmat = np.zeros((self.nVec + 1, self.nVec + 1), dtype = complex)
            for i in range(self.nVec):
                Bmat[self.nVec, i] = - 1.0
                Bmat[i, self.nVec] = - 1.0
            for i in range(self.nVec):
                for j in range(self.nVec):
                    Bmat[i, j] = self.errorVectors[i].conj().T.dot(self.errorVectors[j])

            #w  = lalg.solve(Bmat, b)
            w = lalg.lstsq(Bmat, b)[0]

            w = w[0:self.nVec]
            for i in range(self.nVec):
                returnObj += w[i] * self.averagedObjects[i]

        return returnObj

class AMSgrad(object):
    stepsize = 0.001
    decay1 = 0.1
    decay2 = 0.001
    mom1 = None
    mom2 = None

    def __init__(self, stepsize, decay1, decay2, nParams):
        self.stepsize = stepsize
        self.decay1 = decay1
        self.decay2 = decay2
        self.mom1 = np.zeros((nParams, 1), dtype = float)
        self.mom2 = np.zeros((nParams, 1), dtype = float)

    def update(self, gradient):
        assert(gradient.shape[0] == self.mom1.shape[0])

        delta = np.zeros(gradient.shape)
        for i in range(gradient.shape[0]):
            self.mom1[i] = self.decay1 * gradient[i] + (1.0 - self.decay1) * self.mom1[i]
            self.mom2[i] = max(self.mom2[i], self.decay2 * gradient[i] * gradient[i] + (1.0 - self.decay2) * self.mom2[i])

            delta[i] = - self.stepsize * self.mom1[i] / (np.sqrt(self.mom2[i]) + 1.e-8)

        return delta

def pGHF(mol, mo_coeff, ovlp_mat = None):
    #basic molecule info and integrals
    sz = float(mol.spin) / 2
    ne = mol.nelectron
    nao = mol.nao
    nso = 2 * mol.nao
    s = mol.intor('int1e_ovlp')
    t = mol.intor('int1e_kin')
    v1 = mol.intor('int1e_nuc')
    v2 = mol.intor('int2e', aosym='s1')
    assert(mo_coeff.shape[0] == nso)
    assert(mo_coeff.shape[1] == nso)

    #spin integrals
    S = lalg.block_diag(s, s)
    h1 = t + v1
    H1 = lalg.block_diag(h1, h1)

    #molecular orbitals
    orbs = mo_coeff + 1j * np.zeros(mo_coeff.shape, dtype = float)

    #mixes homo and lumo molecular orbitals to break complex conjugation symmetry
    randOccVirMat = randOrthoMat(2)
    randU = np.identity(nso, dtype = complex)
    randU[(ne - 1):(ne + 1), (ne - 1):(ne + 1)] = randOccVirMat
    #orbs = orbs.dot(randU)

    #Sz symmetry projector
    nGrid = 10
    Wg, Rg = calcSzSymmetryProjector(nso, sz, nGrid)

    Eold = 100
    Etol = 1.e-8
    Gtol = 1.e-6
    doPrint = True
    calcStart = time.time()
    diis = DIIS(2 * (nso - ne) * ne, (nso, nso), 6)
    for m in range(50):
        iterStart = time.time()

        #current wavefunction
        Phi = orbs[:, 0:ne]

        #energy
        #E = calcEnergy(S, H1, v2, Phi, Wg, Rg)

        #fock matrix
        E, F = calcEnergyAndFockMatrix(S, H1, v2, Phi, Wg, Rg)
        Fmo = orbs.conj().T.dot(F).dot(orbs)

        #total energy
        E = np.real(E)
        E0 = E + mol.energy_nuc()

        #E_fd, F_fd = calcEnergyAndFockMatrixFiniteDifference(S, H1, v2, Phi, Wg, Rg)
        #Fmo_fd = orbs.conj().T.dot(F_fd).dot(orbs)

        #gradient
        grad = Fmo[0:ne, ne:nso].flatten()
        gradReal = np.concatenate((np.real(grad), np.imag(grad)), axis = 0)

        timeEnergyGradient = time.time()

        #diis
        F = diis.update(gradReal, F)

        #diagonalize fock matrix
        w, v = geigh(F, S)

        #update orbitals if new orbitals lower the energy
        Phip = v[:, 0:ne]
        Ep = calcEnergy(S, H1, v2, Phip, Wg, Rg)
        if Ep < E:
            orbs = v

            #update error
            Eerror = abs(E - Eold)
            Eold = E

            Gerror = lalg.norm(gradReal)

        #print
        if doPrint == True:
            print(f"-------------------------------- {m} --------------------------------")

            print(f"  Electronic Energy: {E}")
            print(f"  Total Energy: {E0}")
            print(f"  Gradient Norm: {lalg.norm(gradReal)}")
            print(f"  Energy Error: {Eerror}")
            print(f"  Time for Energy and Gradient: {timeEnergyGradient - iterStart}")

        #check for convergence
        if Eerror < Etol or Gerror < Gtol:
            break

    if doPrint == True:
        print(f"\nCalculation Complete")
        print(f"  Total Time: {time.time() - calcStart}")
        print(f"  Total Energy: {E0}")
    return E0, orbs

def readMat(filename, shape, iscomplex):
   if(iscomplex):
     matr = np.zeros(shape)
     mati = np.zeros(shape)
   else:
     mat = np.zeros(shape)
   row = 0
   fileh = open(filename, 'r')
   for line in fileh:
     col = 0
     for coeff in line.split():
       if (iscomplex):
         m = coeff.strip()[1:-1]
         matr[row, col], mati[row, col] = [float(x) for x in m.split(',')]
       else:
         mat[row, col]  = float(coeff)
       col = col + 1
     row = row + 1
   fileh.close()
   if (iscomplex):
     mat = matr + 1j * mati
   return mat

np.set_printoptions(precision=2)
np.set_printoptions(suppress=True)

N = 3
a = 1.4

atomstring = ""
for i in range(N):
    atomstring += f"H 0 0 {i * a};"

mol = gto.Mole()
mol.atom = atomstring
#mol.atom = 'H 0 0 0; H 0 0 1.4; H 0 0 2.8;'
#mol.atom = 'H 0 0 0; H 0 0 1.4'
#mol.atom = 'H 0 0 0'
#mol.atom = 'Li 0 0 0'
mol.basis = 'sto-3g'
#mol.basis = '631g'
#mol.basis = 'ccpvdz'
mol.verbose = 4
mol.spin = 1
mol.unit = 'bohr'
mol.build()

norb = mol.nao
mf = scf.GHF(mol)
dm = mf.get_init_guess()
dm = dm + np.random.rand(2 * norb, 2 * norb) / 100
mf.max_cycle = 100
mf.kernel(dm0 = dm)

S = mf.get_ovlp()
occidx = mf.mo_occ > 0
occOrb = mf.mo_coeff[:, occidx]
#print(occOrb)
fock = mf.get_hcore() + mf.get_veff()
print(fock)
print("\n")

E0, mo = pGHF(mol, mf.mo_coeff)

#mo_coeff = readMat("hf.txt", S.shape, True)
#print(mo_coeff)
#E0, mo = pGHF(mol, mo_coeff)

#print("\n")
#print("Final Result")
#print("Energy")
#print(E0)
#print("Molecular Orbitals")
#print(mo)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='ubuntu', release='5.4.0-58-generic', version='#64-Ubuntu SMP Wed Dec 9 08:16:25 UTC 2020', machine='x86_64', processor='x86_64')  Threads 3
Python 3.8.3 (default, May 19 2020, 18:47:26) 
[GCC 7.3.0]
numpy 1.19.4  scipy 1.4.1
Date: Mon Dec 28 16:11:25 2020
PySCF version 1.7.5
PySCF path  /home/iliya/miniconda3/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 3
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = bohr
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.740848095288 AA    0.000000000000   0.000000000000   1.400000000000 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000   1.481696190576 AA    0.000000000000   0.000000000000   2.800000000000 Bohr

nuclear repulsion = 1.78571428571429
number of shells = 3
number of NR pGTOs = 9
number of NR cGTOs = 3
basis = sto-3g
ecp = {}
CPU time:         0.65


******** <class 'pyscf.scf.ghf.GHF'> ********
method = GHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/iliya/Desktop/projects/funstuff/pyscf/pGHF/SzProjectedFockMatrix/tmpva83mg0e
max_memory 4000 MB (current use 76 MB)
Set gradient conv threshold to 3.16228e-05
init E= -1.3441493173813
  HOMO = 0.0202525286563256  LUMO = 0.0641333329986984
cycle= 1 E= -1.50053672608168  delta_E= -0.156  |g|= 0.0991  |ddm|= 1.15
  HOMO = -0.316040997836471  LUMO = 0.268538235020384
cycle= 2 E= -1.50803631905434  delta_E= -0.0075  |g|= 0.0404  |ddm|= 0.123
  HOMO = -0.329213228873586  LUMO = 0.288068862321948
cycle= 3 E= -1.50955314652768  delta_E= -0.00152  |g|= 0.00189  |ddm|= 0.0845
  HOMO = -0.330467545267285  LUMO = 0.287846794295026
cycle= 4 E= -1.50955819894437  delta_E= -5.05e-06  |g|= 0.000113  |ddm|= 0.00332
  HOMO = -0.330533617643446  LUMO = 0.287837533744925
cycle= 5 E= -1.50955781412657  delta_E= 3.85e-07  |g|= 1.8e-05  |ddm|= 0.000549
  HOMO = -0.330492405748583  LUMO = 0.287842599955782
cycle= 6 E= -1.50955781378646  delta_E= 3.4e-10  |g|= 1.45e-06  |ddm|= 3.72e-05
  HOMO = -0.330492728395555  LUMO = 0.287842572342801
Extra cycle  E= -1.50955784645595  delta_E= -3.27e-08  |g|= 6.41e-07  |ddm|= 3.42e-06
converged SCF energy = -1.50955784645595  <S^2> = 0.76511226  2S+1 = 2.0150556
[[-0.34 -0.58 -0.33 -0.19 -0.04  0.03]
 [-0.58 -0.55 -0.58 -0.04 -0.   -0.04]
 [-0.33 -0.58 -0.34  0.03 -0.04 -0.19]
 [-0.19 -0.04  0.03 -0.36 -0.59 -0.33]
 [-0.04 -0.   -0.04 -0.59 -0.55 -0.59]
 [ 0.03 -0.04 -0.19 -0.33 -0.59 -0.36]]


-------------------------------- 0 --------------------------------
  Electronic Energy: -3.2988942166670974
  Total Energy: -1.5131799309528116
  Gradient Norm: 0.10284363036323053
  Energy Error: 103.2988942166671
  Time for Energy and Gradient: 0.08825788099784404
-------------------------------- 1 --------------------------------
  Electronic Energy: -3.3059036159235404
  Total Energy: -1.5201893302092546
  Gradient Norm: 0.03174131733959648
  Energy Error: 0.007009399256443061
  Time for Energy and Gradient: 0.0688285999931395
-------------------------------- 2 --------------------------------
  Electronic Energy: -3.3067327971186065
  Total Energy: -1.5210185114043207
  Gradient Norm: 0.016250456341153872
  Energy Error: 0.000829181195066031
  Time for Energy and Gradient: 0.0808153499965556
-------------------------------- 3 --------------------------------
  Electronic Energy: -3.3069909294173874
  Total Energy: -1.5212766437031016
  Gradient Norm: 0.011930866149401738
  Energy Error: 0.00025813229878091093
  Time for Energy and Gradient: 0.08229024097090587
-------------------------------- 4 --------------------------------
  Electronic Energy: -3.307148055138551
  Total Energy: -1.521433769424265
  Gradient Norm: 0.011026955708332634
  Energy Error: 0.00015712572116344248
  Time for Energy and Gradient: 0.07598895003320649
-------------------------------- 5 --------------------------------
  Electronic Energy: -3.3072869193463825
  Total Energy: -1.5215726336320967
  Gradient Norm: 0.010886043132789564
  Energy Error: 0.0001388642078317126
  Time for Energy and Gradient: 0.07491484400816262
-------------------------------- 6 --------------------------------
  Electronic Energy: -3.308044610314016
  Total Energy: -1.5223303245997302
  Gradient Norm: 0.011247070750032664
  Energy Error: 0.0001388642078317126
  Time for Energy and Gradient: 0.08007500797975808
-------------------------------- 7 --------------------------------
  Electronic Energy: -3.308044610314016
  Total Energy: -1.5223303245997302
  Gradient Norm: 0.011247070750032664
  Energy Error: 0.0007576909676334509
  Time for Energy and Gradient: 0.07932818902190775
-------------------------------- 8 --------------------------------
  Electronic Energy: -3.309800871241953
  Total Energy: -1.524086585527667
  Gradient Norm: 0.009791122269017292
  Energy Error: 0.0017562609279369035
  Time for Energy and Gradient: 0.0842701270012185
-------------------------------- 9 --------------------------------
  Electronic Energy: -3.310503562845512
  Total Energy: -1.5247892771312264
  Gradient Norm: 0.008906595258577002
  Energy Error: 0.0007026916035592912
  Time for Energy and Gradient: 0.08279715501703322
-------------------------------- 10 --------------------------------
  Electronic Energy: -3.3121186010864685
  Total Energy: -1.5264043153721827
  Gradient Norm: 0.008786295610714312
  Energy Error: 0.0016150382409563235
  Time for Energy and Gradient: 0.07885796099435538
-------------------------------- 11 --------------------------------
  Electronic Energy: -3.3121943997047323
  Total Energy: -1.5264801139904465
  Gradient Norm: 0.013984874887738126
  Energy Error: 0.0016150382409563235
  Time for Energy and Gradient: 0.10379418998491019
-------------------------------- 12 --------------------------------
  Electronic Energy: -3.3121943997047323
  Total Energy: -1.5264801139904465
  Gradient Norm: 0.013984874887738126
  Energy Error: 0.0016150382409563235
  Time for Energy and Gradient: 0.08431046496843919
-------------------------------- 13 --------------------------------
  Electronic Energy: -3.3121943997047323
  Total Energy: -1.5264801139904465
  Gradient Norm: 0.013984874887738126
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.08108155301306397
-------------------------------- 14 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.0779380290186964
-------------------------------- 15 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.07137315097497776
-------------------------------- 16 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.08290153095731512
-------------------------------- 17 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.08573032700223848
-------------------------------- 18 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 7.579861826378931e-05
  Time for Energy and Gradient: 0.07235637999838218
-------------------------------- 19 --------------------------------
  Electronic Energy: -3.3122121066023027
  Total Energy: -1.5264978208880169
  Gradient Norm: 0.007973098271417293
  Energy Error: 1.7706897570413105e-05
  Time for Energy and Gradient: 0.06995561200892553
-------------------------------- 20 --------------------------------
  Electronic Energy: -3.3122681933626392
  Total Energy: -1.5265539076483534
  Gradient Norm: 0.003144712125582493
  Energy Error: 5.608676033652671e-05
  Time for Energy and Gradient: 0.08335871098097414
-------------------------------- 21 --------------------------------
  Electronic Energy: -3.3122810528412927
  Total Energy: -1.526566767127007
  Gradient Norm: 0.002164980727051596
  Energy Error: 1.2859478653481915e-05
  Time for Energy and Gradient: 0.07520620903233066
-------------------------------- 22 --------------------------------
  Electronic Energy: -3.312292315737615
  Total Energy: -1.5265780300233291
  Gradient Norm: 0.001924141215951761
  Energy Error: 1.1262896322250526e-05
  Time for Energy and Gradient: 0.07461406697984785
-------------------------------- 23 --------------------------------
  Electronic Energy: -3.3123480944056136
  Total Energy: -1.5266338086913278
  Gradient Norm: 0.0007630701397785856
  Energy Error: 5.577866799866271e-05
  Time for Energy and Gradient: 0.07664409495191649
-------------------------------- 24 --------------------------------
  Electronic Energy: -3.3123568519065385
  Total Energy: -1.5266425661922527
  Gradient Norm: 0.00021080285634408576
  Energy Error: 8.757500924883033e-06
  Time for Energy and Gradient: 0.07741730299312621
-------------------------------- 25 --------------------------------
  Electronic Energy: -3.3123573356952214
  Total Energy: -1.5266430499809356
  Gradient Norm: 6.767015262924585e-05
  Energy Error: 4.837886828923388e-07
  Time for Energy and Gradient: 0.07936736400006339
-------------------------------- 26 --------------------------------
  Electronic Energy: -3.312357366512238
  Total Energy: -1.526643080797952
  Gradient Norm: 6.176171049671492e-05
  Energy Error: 3.08170164942112e-08
  Time for Energy and Gradient: 0.07792267802869901
-------------------------------- 27 --------------------------------
  Electronic Energy: -3.312357369286505
  Total Energy: -1.5266430835722191
  Gradient Norm: 2.1831859151885413e-05
  Energy Error: 2.774267038319067e-09
  Time for Energy and Gradient: 0.07592584902886301

Calculation Complete
  Total Time: 2.524899147974793
  Total Energy: -1.5266430835722191
