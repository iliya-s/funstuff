#INFO: **** input file is /home/iliya/Desktop/projects/funstuff/pyscf/pGHF/KSzProjectedFockMatrix/fock.py ****
from pyscf import gto, scf, tools
import numpy as np
import scipy.linalg as lalg
import scipy.optimize as opt
import time
import sys

def contractEri(v2, tdm):
    nso = tdm.shape[0]
    nao = nso // 2

    tdmaa = tdm[:nao, :nao]
    tdmbb = tdm[nao:, nao:]
    tdmab = tdm[:nao, nao:]
    tdmba = tdm[nao:, :nao]

    #the spin indices on the J, K matrices are from the contracted indices
    Jaa = np.einsum('pqrs,sr->pq', v2, tdmaa, dtype = complex, optimize = True)

    Jbb = np.einsum('pqrs,sr->pq', v2, tdmbb, dtype = complex, optimize = True)

    Kaa = np.einsum('psrq,sr->pq', v2, tdmaa, dtype = complex, optimize = True)
    Kbb = np.einsum('psrq,sr->pq', v2, tdmbb, dtype = complex, optimize = True)

    Kab = np.einsum('psrq,sr->pq', v2, tdmba, dtype = complex, optimize = True)
    Kba = np.einsum('psrq,sr->pq', v2, tdmab, dtype = complex, optimize = True)

    G1 = np.zeros((nso, nso), dtype = complex)
    G1[:nao, :nao] = Jaa + Jbb - Kaa
    G1[nao:, nao:] = Jaa + Jbb - Kbb
    G1[:nao, nao:] = - Kba
    G1[nao:, :nao] = - Kab

    return G1

def calcSzSymmetryProjector(nso, sz, nGrid = 8):
    nao = nso // 2
    Wg = []
    Rg = []
    for p in range(nGrid):
        theta = 2 * np.pi * p / nGrid

        w = np.exp(- 1j * theta * sz) / nGrid
        Wg.append(w)

        r = lalg.block_diag(np.exp(1j * theta * 0.5) * np.identity(nao), np.exp(1j * theta * (- 0.5)) * np.identity(nao))
        Rg.append(r)
    return Wg, Rg

def calcEnergy(S, H1, v2, Phi, Wg, Rg):
    #denominator and numerator of energy
    D = 0.0
    N = 0.0

    for i in range(len(Wg)):
        Phig = Rg[i].dot(Phi)

        #overlap quantities
        O = Phi.conj().T.dot(S).dot(Phig)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        tdm = Phig.dot(invO).dot(Phi.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    for i in range(len(Wg)):
        Phig = Rg[i].dot(Phi.conj())

        #overlap quantities
        O = Phi.conj().T.dot(S).dot(Phig)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        tdm = Phig.dot(invO).dot(Phi.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    E = N / D
    return np.real(E)

def calcEnergyFromDensity(S, H1, v2, Phi, dm, Wg, Rg):
    #denominator and numerator of energy
    D = 0.0
    N = 0.0

    for i in range(len(Wg)):
        #overlap quantities
        O = np.einsum('xa,ab,bc,cd,d,de,ef,fy->xy', Phi.conj().T, S, dm, S, np.diag(Rg[i]), dm, S, Phi, dtype = complex, optimize = True)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #transition density matrix
        tdm = np.einsum('x,xa,ab,bc,cd,de,ef,fy->xy', np.diag(Rg[i]), dm, S, Phi, invO, Phi.conj().T, S, dm, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    for i in range(len(Wg)):
        #overlap quantities
        Op = np.einsum('xa,ab,bc,cd,d,de,ef,fy->xy', Phi.conj().T, S, dm, S, np.diag(Rg[i]), dm.conj(), S, Phi.conj(), dtype = complex, optimize = True)
        invOp = lalg.inv(Op)
        detOp = lalg.det(Op)

        #transition density matrix
        tdm = np.einsum('x,xa,ab,bc,cd,de,ef,fy->xy', np.diag(Rg[i]), dm.conj(), S, Phi.conj(), invOp, Phi.conj().T, S, dm, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #averages with symmetry weights
        D += Wg[i] * detOp
        N += Wg[i] * detOp * H

    E = N / D
    return np.real(E)

def calcEnergyAndFockMatrix(S, H1, v2, Phi, Wg, Rg):
    #deformed density matrix
    dm = Phi.dot(Phi.conj().T)

    #denominator and numerator of energy
    D = 0.0
    N = 0.0

    #gradient with respect to a,b element of deformed denisty matrix of the denominator and numerator of energy
    Dab = np.zeros(S.shape, dtype = complex)
    Nab = np.zeros(S.shape, dtype = complex)

    for i in range(len(Wg)):
        #overlap quantities
        O = np.einsum('ma,ab,b,bn->mn', Phi.conj().T, S, np.diag(Rg[i]), Phi, dtype = complex, optimize = True)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #derivative of detO with respect to a,b dm parameter
        detOab  = detO * np.einsum('ab,bc,cm,nd,d,de,ef,fa->mn', invO, Phi.conj().T, S, S, np.diag(Rg[i]), dm, S, Phi, dtype = complex, optimize = True)
        detOab += detO * np.einsum('ab,bc,cd,de,em,m,nf,fa->mn', invO, Phi.conj().T, S, dm, S, np.diag(Rg[i]), S, Phi, dtype = complex, optimize = True)

        #transition density matrix
        tdm = np.einsum('m,ma,ab,bn->mn', np.diag(Rg[i]), Phi, invO, Phi.conj().T, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

        #drivative of H with respect to a,b dm parameter
        M1 = H1 + G1

        X = np.einsum('ab,bc,cd,de,ef->af', S, Phi, invO, Phi.conj().T, S, dtype = complex, optimize = True)

        A1 = np.einsum('na,ab,bm,m->mn', X, dm, M1, np.diag(Rg[i]))
        A2 = np.einsum('na,a,ab,bm->mn', M1, np.diag(Rg[i]), dm, X)

        B1 = - np.einsum('ab,b,bc,cm,nd,d,de,ef,fa->mn', M1, np.diag(Rg[i]), dm, X, S, np.diag(Rg[i]), dm, X, dm, dtype = complex, optimize = True)
        B2 = - np.einsum('ab,b,bc,cd,de,em,m,nf,fa->mn', M1, np.diag(Rg[i]), dm, X, dm, S, np.diag(Rg[i]), X, dm, dtype = complex, optimize = True)

        Hab = A1 + A2 + B1 + B2

        #averages with symmetry weights
        D += Wg[i] * detO
        Dab += Wg[i] * detOab

        N += Wg[i] * detO * H
        Nab += Wg[i] * (detOab * H + detO * Hab)

    #gradient with respect to a,b and a,b* element of deformed denisty matrix of the denominator and numerator of energy
    #Dab_ = np.zeros(S.shape, dtype = complex)
    #Nab_ = np.zeros(S.shape, dtype = complex)
    #Dab_bar = np.zeros(S.shape, dtype = complex)
    #Nab_bar = np.zeros(S.shape, dtype = complex)

    for i in range(len(Wg)):
        #overlap quantities
        O = np.einsum('ma,ab,b,bn->mn', Phi.conj().T, S, np.diag(Rg[i]), Phi.conj(), dtype = complex, optimize = True)
        invO = lalg.inv(O)
        detO = lalg.det(O)

    #    #derivative of detO with respect to a,b dm parameter
    #    #detOab_ = detO * np.einsum('ab,bc,cm,nd,d,de,ef,fa->mn', invO, Phi.conj().T, S, S, np.diag(Rg[i]), dm.conj(), S, Phi.conj(), dtype = complex, optimize = True)
    #    #detOab_bar = detO * np.einsum('ab,bc,cd,de,em,m,nf,fa->mn', invO, Phi.conj().T, S, dm, S, np.diag(Rg[i]), S, Phi.conj(), dtype = complex, optimize = True)

        #transition density matrix
        tdm = np.einsum('m,ma,ab,bn->mn', np.diag(Rg[i]), Phi.conj(), invO, Phi.conj().T, dtype = complex, optimize = True)

        #hamiltonian quantities
        G1 = contractEri(v2, tdm)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, tdm, dtype = complex, optimize = True)

    #    #drivative of H with respect to a,b dm parameter
    #    M1 = H1 + G1

    #    X = np.einsum('ab,bc,cd,de,ef->af', S, Phi.conj(), invO, Phi.conj().T, S, dtype = complex, optimize = True)

    #    #A_ = np.einsum('na,a,ab,bm->mn', M1, np.diag(Rg[i]), dm.conj(), X, dtype = complex, optimize = True)
    #    #B_ = - np.einsum('ab,b,bc,cm,nd,d,de,ef,fa->mn', M1, np.diag(Rg[i]), dm.conj(), X, S, np.diag(Rg[i]), dm.conj(), X, dm, dtype = complex, optimize = True)

    #    #A_bar = np.einsum('na,ab,bm,m->mn', X, dm, M1, np.diag(Rg[i]))
    #    #B_bar = - np.einsum('ab,b,bc,cd,de,em,m,nf,fa->mn', M1, np.diag(Rg[i]), dm.conj(), X, dm, S, np.diag(Rg[i]), X, dm, dtype = complex, optimize = True)

    #    #Hab_ = A_ + B_
    #    #Hab_bar = A_bar + B_bar

        #averages with symmetry weights
        D += Wg[i] * detO
    #    #Dab_ += Wg[i] * detOab_
    #    #Dab_bar += Wg[i] * detOab_bar

        N += Wg[i] * detO * H
    #    #Nab_ += Wg[i] * (detOab_ * H + detO * Hab_)
    #    #Nab_bar += Wg[i] * (detOab_bar * H + detO * Hab_bar)

    #Nab_r = Nab_ + Nab_bar
    #Nab_i = 1j * (Nab_ - Nab_bar)

    #Dab_r = Dab_ + Dab_bar
    #Dab_i = 1j * (Dab_ - Dab_bar)

    #Nab += Nab_r + 1j * Nab_i
    #Dab += Dab_r + 1j * Dab_i

    E = N / D
    F = (Nab / D) - E * (Dab / D)

    #separate occupied-virtual spaces
    #P = dm.dot(S) #occ projector
    #I = np.identity(P.shape[0], dtype = complex)
    #Q = I - P #virt projector
    #Fstandard = H1 + contractEri(v2, dm)
    #F = F + P.conj().T.dot(Fstandard).dot(P) + Q.conj().T.dot(Fstandard).dot(Q)
    return E, F

def calcEnergyAndFockMatrixFiniteDifference(S, H1, v2, Phi, Wg, Rg):
    ds = 1.e-6

    dm = Phi.dot(Phi.conj().T)
    E0 = calcEnergyFromDensity(S, H1, v2, Phi, dm, Wg, Rg)

    Fr = np.zeros(dm.shape, dtype = complex)
    for a in range(dm.shape[0]):
        for b in range(dm.shape[1]):
            dm1 = dm.copy()
            dm1[a, b] += ds
            E = calcEnergyFromDensity(S, H1, v2, Phi, dm1, Wg, Rg)

            Fr[a, b] = (E - E0) / ds

    Fi = np.zeros(dm.shape, dtype = complex)
    for a in range(dm.shape[0]):
        for b in range(dm.shape[1]):
            dm1 = dm.copy()
            dm1[a, b] += 1j * ds
            E = calcEnergyFromDensity(S, H1, v2, Phi, dm1, Wg, Rg)

            Fi[a, b] = (E - E0) / ds

    return E0, Fr + 1j * Fi

def geig(A, B):
    w, v = lalg.eigh(B)
    idx = []
    for i in range(w.size):
        if abs(w[i]) > 1.e-8:
            idx.append(i)
    X = np.zeros((B.shape[0], len(idx)), dtype = complex)
    for i in range(len(idx)):
        X[:, i] = v[:, idx[i]] / np.sqrt(w[idx[i]])

    Ap = X.conj().T.dot(A).dot(X)
    Bp = X.conj().T.dot(B).dot(X)
    w, v = lalg.eig(Ap)
    v = X.dot(v)
    return w, v

def geigh(A, B):
    w, v = lalg.eigh(B)
    idx = []
    for i in range(w.size):
        if abs(w[i]) > 1.e-8:
            idx.append(i)
    X = np.zeros((B.shape[0], len(idx)), dtype = complex)
    for i in range(len(idx)):
        X[:, i] = v[:, idx[i]] / np.sqrt(w[idx[i]])

    Ap = X.conj().T.dot(A).dot(X)
    Bp = X.conj().T.dot(B).dot(X)
    w, v = lalg.eigh(Ap)
    v = X.dot(v)
    return w, v

def randOrthoMat(dim, S = None):
    randMat = np.random.randn(dim, dim) + 1j * np.random.randn(dim, dim)
    randMat = randMat + randMat.conj().T
    w, v = lalg.eigh(randMat, S)
    return v

def modifiedGramSchmidt(V, S = None):
    if S is None:
        S = np.identity(V.shape[0], dtype = V.dtype)
    U = np.zeros(V.shape, dtype = V.dtype)
    U[:, 0] = V[:, 0] / np.sqrt( V[:, 0].conj().T.dot(S).dot(V[:, 0]) )
    for i in range(1, V.shape[1]):
        U[:, i] = V[:, i]
        for j in range(i):
            U[:, i] = U[:, i] - ( U[:, j].conj().T.dot(S).dot(U[:, i]) ) / ( U[:, j].conj().T.dot(S).dot(U[:, j]) ) * U[:, j]
        U[:, i] = U[:, i] / np.sqrt( U[:, i].conj().T.dot(S).dot(U[:, i]) )
    return U

class DIIS(object):
    counter = 0 #diis does nothing for the first nVec iterations
    nVec = 6

    sizeVector = None
    errorVectors = None

    shapeObject = None
    averagedObjects = None

    def __init__(self, sizeVector, shapeObject, nVec = 6):
        self.sizeVector = sizeVector
        self.errorVectors = []

        self.shapeObject = shapeObject
        self.averagedObjects = []

        self.nVec = nVec
        for i in range(nVec):
            errorVec = np.zeros((sizeVector, 1), dtype = complex)
            self.errorVectors.append(errorVec)

            averagedObject = np.zeros(shapeObject, dtype = complex)
            self.averagedObjects.append(averagedObject)

    def restart(self):
        self.counter = 0

    def update(self, errVec, avgObj):
        self.counter += 1
        self.errorVectors.pop(0)
        self.errorVectors.append(errVec)
        self.averagedObjects.pop(0)
        self.averagedObjects.append(avgObj)

        returnObj = np.zeros(self.shapeObject, dtype = complex)
        if self.counter < self.nVec:
            returnObj = avgObj
        else:
            b = np.zeros((self.nVec + 1, 1), dtype = complex)
            b[self.nVec] = - 1.0

            Bmat = np.zeros((self.nVec + 1, self.nVec + 1), dtype = complex)
            for i in range(self.nVec):
                Bmat[self.nVec, i] = - 1.0
                Bmat[i, self.nVec] = - 1.0
            for i in range(self.nVec):
                for j in range(self.nVec):
                    Bmat[i, j] = self.errorVectors[i].conj().T.dot(self.errorVectors[j])

            #w  = lalg.solve(Bmat, b)
            w = lalg.lstsq(Bmat, b)[0]

            w = w[0:self.nVec]
            for i in range(self.nVec):
                returnObj += w[i] * self.averagedObjects[i]

        return returnObj

class AMSgrad(object):
    stepsize = 0.001
    decay1 = 0.1
    decay2 = 0.001
    mom1 = None
    mom2 = None

    def __init__(self, stepsize, decay1, decay2, nParams):
        self.stepsize = stepsize
        self.decay1 = decay1
        self.decay2 = decay2
        self.mom1 = np.zeros((nParams, 1), dtype = float)
        self.mom2 = np.zeros((nParams, 1), dtype = float)

    def update(self, gradient):
        assert(gradient.shape[0] == self.mom1.shape[0])

        delta = np.zeros(gradient.shape)
        for i in range(gradient.shape[0]):
            self.mom1[i] = self.decay1 * gradient[i] + (1.0 - self.decay1) * self.mom1[i]
            self.mom2[i] = max(self.mom2[i], self.decay2 * gradient[i] * gradient[i] + (1.0 - self.decay2) * self.mom2[i])

            delta[i] = - self.stepsize * self.mom1[i] / (np.sqrt(self.mom2[i]) + 1.e-8)

        return delta

def pGHF(mol, mo_coeff, ovlp_mat = None):
    #basic molecule info and integrals
    sz = float(mol.spin) / 2
    ne = mol.nelectron
    nao = mol.nao
    nso = 2 * mol.nao
    s = mol.intor('int1e_ovlp')
    t = mol.intor('int1e_kin')
    v1 = mol.intor('int1e_nuc')
    v2 = mol.intor('int2e', aosym='s1')
    assert(mo_coeff.shape[0] == nso)
    assert(mo_coeff.shape[1] == nso)

    #spin integrals
    S = lalg.block_diag(s, s)
    h1 = t + v1
    H1 = lalg.block_diag(h1, h1)

    #molecular orbitals
    orbs = mo_coeff + 1j * np.zeros(mo_coeff.shape, dtype = float)

    #mixes homo and lumo molecular orbitals to break complex conjugation symmetry
    randOccVirMat = randOrthoMat(2)
    randU = np.identity(nso, dtype = complex)
    randU[(ne - 1):(ne + 1), (ne - 1):(ne + 1)] = randOccVirMat
    #orbs = orbs.dot(randU)
    orbs += 0.001 * (np.random.randn(S.shape[0], S.shape[1]) + 1j * np.random.randn(S.shape[0], S.shape[1]))

    #Sz symmetry projector
    nGrid = 10
    Wg, Rg = calcSzSymmetryProjector(nso, sz, nGrid)

    Eold = 100
    Etol = 1.e-8
    Gtol = 1.e-6
    Eerror = 100
    Gerror = 100
    doPrint = True
    calcStart = time.time()
    diis = DIIS(2 * (nso - ne) * ne, (nso, nso), 6)
    for m in range(1):
        iterStart = time.time()

        #current wavefunction
        Phi = orbs[:, 0:ne]

        #energy
        E = calcEnergy(S, H1, v2, Phi, Wg, Rg)
        print("calc energy")
        print(E + mol.energy_nuc())

        #fock matrix
        E, F = calcEnergyAndFockMatrix(S, H1, v2, Phi, Wg, Rg)
        print("calc energy and fock matrix")
        print(E + mol.energy_nuc())
        print(F)
        Fmo = orbs.conj().T.dot(F).dot(orbs)

        #total energy
        E = np.real(E)
        E0 = E + mol.energy_nuc()

        E_fd, F_fd = calcEnergyAndFockMatrixFiniteDifference(S, H1, v2, Phi, Wg, Rg)
        print("calc energy and fock matrix fin-diff")
        print(E_fd + mol.energy_nuc())
        print(F_fd)
        #Fmo_fd = orbs.conj().T.dot(F_fd).dot(orbs)

        #gradient
        grad = Fmo[0:ne, ne:nso].flatten()
        gradReal = np.concatenate((np.real(grad), np.imag(grad)), axis = 0)

        timeEnergyGradient = time.time()

        #diis
        F = diis.update(gradReal, F)

        #diagonalize fock matrix
        w, v = geigh(F, S)

        #update orbitals if new orbitals lower the energy
        Phip = v[:, 0:ne]
        Ep = calcEnergy(S, H1, v2, Phip, Wg, Rg)
        if Ep < E:
            orbs = v

            #update error
            Eerror = abs(E - Eold)
            Eold = E

            Gerror = lalg.norm(gradReal)

        #print
        if doPrint == True:
            print(f"-------------------------------- {m} --------------------------------")

            print(f"  Electronic Energy: {E}")
            print(f"  Total Energy: {E0}")
            print(f"  Gradient Norm: {lalg.norm(gradReal)}")
            print(f"  Energy Error: {Eerror}")
            print(f"  Time for Energy and Gradient: {timeEnergyGradient - iterStart}")

        #check for convergence
        if Eerror < Etol or Gerror < Gtol:
            break

    if doPrint == True:
        print(f"\nCalculation Complete")
        print(f"  Total Time: {time.time() - calcStart}")
        print(f"  Total Energy: {E0}")
    return E0, orbs

def readMat(filename, shape, iscomplex):
   if(iscomplex):
     matr = np.zeros(shape)
     mati = np.zeros(shape)
   else:
     mat = np.zeros(shape)
   row = 0
   fileh = open(filename, 'r')
   for line in fileh:
     col = 0
     for coeff in line.split():
       if (iscomplex):
         m = coeff.strip()[1:-1]
         matr[row, col], mati[row, col] = [float(x) for x in m.split(',')]
       else:
         mat[row, col]  = float(coeff)
       col = col + 1
     row = row + 1
   fileh.close()
   if (iscomplex):
     mat = matr + 1j * mati
   return mat

np.set_printoptions(precision=2)
np.set_printoptions(suppress=False)

N = 4
a = 1.4

atomstring = ""
for i in range(N):
    atomstring += f"H 0 0 {i * a};"

mol = gto.Mole()
mol.atom = atomstring
#mol.atom = 'H 0 0 0; H 0 0 1.4; H 0 0 2.8;'
#mol.atom = 'H 0 0 0; H 0 0 1.4'
#mol.atom = 'H 0 0 0'
#mol.atom = 'Li 0 0 0'
mol.basis = 'sto-3g'
#mol.basis = '631g'
#mol.basis = 'ccpvdz'
mol.verbose = 4
mol.spin = 0
mol.unit = 'bohr'
mol.build()

norb = mol.nao
mf = scf.GHF(mol)
dm = mf.get_init_guess()
dm = dm + np.random.rand(2 * norb, 2 * norb) / 100
mf.max_cycle = 100
mf.kernel(dm0 = dm)

S = mf.get_ovlp()
occidx = mf.mo_occ > 0
occOrb = mf.mo_coeff[:, occidx]
#print(occOrb)
fock = mf.get_hcore() + mf.get_veff()
#print(fock)

print("\ninitial solution")
#print(mf.mo_coeff)
E0, mo = pGHF(mol, mf.mo_coeff)

print("\nkszghf solution")
mo_coeff = readMat("hf.txt", S.shape, True)
#print(mo_coeff)
E0, mo = pGHF(mol, mo_coeff)

#print("\n")
#print("Final Result")
#print("Energy")
#print(E0)
#print("Molecular Orbitals")
#print(mo)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='ubuntu', release='5.4.0-58-generic', version='#64-Ubuntu SMP Wed Dec 9 08:16:25 UTC 2020', machine='x86_64', processor='x86_64')  Threads 3
Python 3.8.3 (default, May 19 2020, 18:47:26) 
[GCC 7.3.0]
numpy 1.19.4  scipy 1.4.1
Date: Tue Dec 29 08:02:45 2020
PySCF version 1.7.5
PySCF path  /home/iliya/miniconda3/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 4
[INPUT] num. electrons = 4
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = bohr
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.740848095288 AA    0.000000000000   0.000000000000   1.400000000000 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000   1.481696190576 AA    0.000000000000   0.000000000000   2.800000000000 Bohr
[INPUT]  4 H      0.000000000000   0.000000000000   2.222544285864 AA    0.000000000000   0.000000000000   4.200000000000 Bohr

nuclear repulsion = 3.0952380952381
number of shells = 4
number of NR pGTOs = 12
number of NR cGTOs = 4
basis = sto-3g
ecp = {}
CPU time:         0.33


******** <class 'pyscf.scf.ghf.GHF'> ********
method = GHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/iliya/Desktop/projects/funstuff/pyscf/pGHF/KSzProjectedFockMatrix/tmpr1eto52_
max_memory 4000 MB (current use 76 MB)
Set gradient conv threshold to 3.16228e-05
init E= -1.92166118182607
  HOMO = -0.222939597749544  LUMO = 0.442131675347094
cycle= 1 E= -2.09467693108501  delta_E= -0.173  |g|= 0.0788  |ddm|= 1.03
  HOMO = -0.426436444383952  LUMO = 0.483267177922432
cycle= 2 E= -2.09828011602714  delta_E= -0.0036  |g|= 0.011  |ddm|= 0.149
  HOMO = -0.425045640587553  LUMO = 0.492056560398912
cycle= 3 E= -2.09837401319952  delta_E= -9.39e-05  |g|= 0.00281  |ddm|= 0.0185
  HOMO = -0.425989698512825  LUMO = 0.493057453924826
cycle= 4 E= -2.09838153385396  delta_E= -7.52e-06  |g|= 0.000489  |ddm|= 0.00626
  HOMO = -0.426030418494614  LUMO = 0.493054988787239
cycle= 5 E= -2.09838232657757  delta_E= -7.93e-07  |g|= 0.000149  |ddm|= 0.00294
  HOMO = -0.42604606212442  LUMO = 0.493071973488229
cycle= 6 E= -2.09838240528927  delta_E= -7.87e-08  |g|= 1.65e-05  |ddm|= 0.00111
  HOMO = -0.426050630789022  LUMO = 0.493064173324063
cycle= 7 E= -2.09838240612847  delta_E= -8.39e-10  |g|= 1.22e-06  |ddm|= 0.00012
  HOMO = -0.426050529211397  LUMO = 0.49306526558525
Extra cycle  E= -2.09838240612952  delta_E= -1.05e-12  |g|= 3.48e-07  |ddm|= 1.86e-06
converged SCF energy = -2.09838240612952  <S^2> = 2.0479174e-12  2S+1 = 1

initial solution
calc energy
-2.09837987740354
calc energy and fock matrix
(-2.098379877403541-7.12668387312239e-07j)
[[-0.  +7.94e-06j -0.  -1.86e-03j -0.  -3.92e-03j -0.  -4.20e-03j
  -0.  -1.14e-03j -0.  -1.13e-03j -0.  -3.47e-04j -0.  +2.50e-04j]
 [-0.  +1.88e-03j -0.01+1.48e-05j -0.01-2.93e-03j -0.  -4.02e-03j
  -0.  -1.79e-03j -0.  -1.94e-03j -0.  -1.03e-03j -0.  -1.77e-04j]
 [-0.  +3.94e-03j -0.01+2.96e-03j -0.01+1.71e-05j -0.  -1.82e-03j
  -0.  -1.99e-03j -0.  -2.34e-03j -0.  -1.68e-03j -0.  -8.19e-04j]
 [-0.  +4.21e-03j -0.  +4.04e-03j -0.  +1.85e-03j -0.  +1.03e-05j
  -0.  -1.52e-03j -0.  -1.89e-03j -0.  -1.54e-03j -0.  -9.30e-04j]
 [-0.  +1.15e-03j -0.  +1.79e-03j -0.  +1.99e-03j -0.  +1.53e-03j
   0.  -2.53e-06j  0.  -2.63e-04j -0.  -8.64e-04j -0.  -9.93e-04j]
 [-0.  +1.14e-03j -0.  +1.95e-03j -0.  +2.35e-03j -0.  +1.89e-03j
   0.  +2.63e-04j -0.  +3.00e-06j -0.  -6.85e-04j -0.  -9.53e-04j]
 [-0.  +3.63e-04j -0.  +1.05e-03j -0.  +1.69e-03j -0.  +1.55e-03j
  -0.  +8.73e-04j -0.  +6.98e-04j -0.  +4.63e-06j -0.  -4.95e-04j]
 [-0.  -2.36e-04j -0.  +1.92e-04j -0.  +8.29e-04j -0.  +9.33e-04j
  -0.  +1.00e-03j -0.  +9.66e-04j -0.  +4.99e-04j  0.  -9.23e-07j]]
calc energy and fock matrix fin-diff
-2.098379877403542
[[-6.03e-04-1.37e-06j -1.18e-04+5.98e-05j  2.24e-05+1.55e-05j
  -2.97e-04-3.80e-05j  2.58e-05-1.22e-04j  4.13e-05+8.39e-05j
   4.10e-05+2.55e-05j  1.37e-05-9.09e-05j]
 [-1.17e-04-6.13e-05j  3.25e-04-2.18e-07j  2.49e-04+1.32e-05j
  -3.52e-04-1.44e-05j -3.24e-05-1.15e-04j -1.86e-05+9.19e-05j
  -4.37e-06+2.02e-05j -3.08e-05-6.66e-05j]
 [ 2.22e-05-1.59e-05j  2.49e-04-1.35e-05j  3.17e-04-2.28e-07j
  -1.31e-04-2.29e-05j -3.29e-05-5.13e-05j -1.05e-05+5.53e-05j
   2.89e-06+2.62e-06j -4.33e-05+1.36e-05j]
 [-2.97e-04+3.73e-05j -3.52e-04+1.30e-05j -1.31e-04+2.14e-05j
  -1.89e-04-8.35e-07j  7.70e-06+3.80e-06j  4.26e-05+8.70e-07j
   5.38e-05-5.14e-05j -2.67e-06+1.07e-05j]
 [ 2.55e-05+1.22e-04j -3.27e-05+1.15e-04j -3.31e-05+5.12e-05j
   7.71e-06-3.78e-06j -1.68e-04-8.00e-07j  2.01e-04+1.39e-07j
   2.83e-04-4.40e-07j  4.63e-04-2.82e-05j]
 [ 4.15e-05-8.38e-05j -1.83e-05-9.20e-05j -1.03e-05-5.54e-05j
   4.26e-05-7.59e-07j  2.00e-04-7.24e-07j -1.04e-04-7.75e-07j
  -3.64e-04+1.97e-05j -2.30e-04+1.98e-07j]
 [ 4.11e-05-2.54e-05j -4.32e-06-2.02e-05j  2.90e-06-2.62e-06j
   5.36e-05+5.16e-05j  2.82e-04+7.26e-07j -3.64e-04-2.16e-05j
  -4.22e-05-6.96e-07j  1.81e-04+1.64e-06j]
 [ 1.35e-05+9.09e-05j -3.10e-05+6.66e-05j -4.33e-05-1.37e-05j
  -2.64e-06-1.07e-05j  4.64e-04+2.94e-05j -2.30e-04-1.25e-06j
   1.81e-04-2.28e-06j  2.95e-04-2.00e-07j]]
-------------------------------- 0 --------------------------------
  Electronic Energy: -5.193617972641636
  Total Energy: -2.098379877403541
  Gradient Norm: 0.0009345790011654676
  Energy Error: 100
  Time for Energy and Gradient: 3.3642232659622096

Calculation Complete
  Total Time: 3.371810919023119
  Total Energy: -2.098379877403541

kszghf solution
calc energy
-2.1382409613881976
calc energy and fock matrix
(-2.1382409613881976+0.00045914120662091036j)
[[ 2.17e-01-0.j    2.07e-01-0.04j  9.47e-02-0.01j  2.15e-02-0.02j
   2.05e-03-0.04j  7.80e-04+0.j    1.74e-03+0.03j  1.03e-03+0.02j]
 [ 2.07e-01+0.04j  2.21e-01-0.j    1.39e-01+0.01j  5.02e-02+0.05j
  -3.84e-03-0.02j  2.78e-03+0.02j  1.75e-03+0.03j  1.35e-02+0.02j]
 [ 9.50e-02+0.01j  1.39e-01-0.02j  1.68e-01-0.j    1.16e-01+0.12j
  -1.74e-02-0.05j -3.42e-04-0.02j -6.64e-03+0.01j -5.13e-03+0.02j]
 [ 2.19e-02+0.02j  4.94e-02-0.05j  1.14e-01-0.13j  1.51e-01-0.j
  -7.51e-03-0.05j  2.66e-03-0.05j  3.33e-03-0.j   -2.62e-04+0.02j]
 [ 2.78e-03+0.04j -3.45e-03+0.02j -1.67e-02+0.05j -6.75e-03+0.05j
   2.23e-01-0.j    2.01e-01-0.06j  7.57e-02-0.06j  1.24e-03-0.07j]
 [ 7.09e-04-0.j    2.42e-03-0.02j -6.63e-05+0.02j  3.40e-03+0.05j
   2.02e-01+0.06j  2.29e-01-0.j    1.47e-01-0.02j  5.23e-02+0.01j]
 [ 1.31e-03-0.03j  1.28e-03-0.03j -6.80e-03-0.01j  3.40e-03+0.j
   7.67e-02+0.06j  1.47e-01+0.02j  1.66e-01-0.j    1.05e-01+0.1j ]
 [ 7.79e-04-0.02j  1.32e-02-0.03j -5.49e-03-0.02j -6.40e-04-0.02j
   2.44e-03+0.07j  5.21e-02-0.01j  1.03e-01-0.11j  1.34e-01-0.j  ]]
calc energy and fock matrix fin-diff
-2.138240961388195
[[-2.43e-04+1.55e-03j -4.24e-04+1.42e-03j -5.82e-04+7.22e-04j
  -4.78e-04+3.34e-04j -2.52e-04+3.13e-04j  2.80e-04+4.58e-04j
   2.81e-04+2.40e-04j  1.19e-04+1.56e-04j]
 [ 2.60e-04+1.48e-03j  3.22e-04+1.62e-03j  1.21e-04+1.14e-03j
  -1.26e-05+5.03e-04j -2.13e-04+4.50e-04j  3.38e-04+4.27e-04j
   3.59e-04+3.88e-04j  2.59e-04+9.90e-05j]
 [-1.09e-04+4.58e-04j  1.53e-04+9.78e-04j  3.23e-04+1.31e-03j
   4.30e-04+7.60e-04j -3.34e-04+1.26e-04j  2.08e-05+1.80e-04j
   1.00e-04+5.14e-05j  2.12e-04-2.94e-04j]
 [ 1.33e-04-1.08e-04j -4.53e-04+4.04e-04j -1.24e-03+1.09e-03j
  -1.02e-03+1.13e-03j -1.04e-04+1.01e-04j  5.03e-05+5.80e-05j
   1.63e-04-3.04e-04j  2.02e-04-3.69e-04j]
 [ 1.90e-04-2.05e-04j -1.06e-04-5.80e-04j -1.04e-04-5.89e-04j
   9.16e-05-2.70e-04j -5.94e-04+1.50e-03j -3.68e-04+1.42e-03j
  -7.06e-04+8.08e-04j -3.12e-04+2.55e-04j]
 [ 2.30e-04-2.99e-04j  2.48e-05-4.11e-04j  5.72e-05-4.12e-04j
   3.28e-04-1.61e-04j  2.54e-04+1.40e-03j  5.70e-04+1.64e-03j
   1.72e-04+1.09e-03j -1.67e-04+4.90e-04j]
 [ 6.88e-05+1.65e-05j  1.81e-04-2.43e-04j  1.67e-04-2.14e-04j
   2.80e-04+2.04e-04j -3.08e-04+4.17e-04j  1.43e-04+1.20e-03j
   1.09e-03+1.36e-03j  5.83e-04+7.59e-04j]
 [ 1.28e-05+1.36e-04j  1.50e-04+3.97e-04j  2.09e-04+4.63e-04j
   1.71e-04+4.25e-04j  2.31e-04-1.97e-04j -6.69e-04+3.38e-04j
  -1.13e-03+9.63e-04j -1.87e-03+1.08e-03j]]
-------------------------------- 0 --------------------------------
  Electronic Energy: -5.233479056626293
  Total Energy: -2.1382409613881976
  Gradient Norm: 0.24282985432326143
  Energy Error: 100
  Time for Energy and Gradient: 3.2874897320289165

Calculation Complete
  Total Time: 3.2954828100046143
  Total Energy: -2.1382409613881976
